---
layout: post
title:  "Gstreamer Conference 1"
date:   2016-10-22 11:19:10 +0900
categories: Gstreamer
---

GStreamer Conference 2016을 다녀왔다.<br>
10-11 October 2016 · Berlin, Germany


컨퍼런스장은 소박했다. 창고처럼 생긴 낮은 건물이었고 1층은 카페 겸 레스토랑으로 운영되고 있었다. 컨퍼런스장까지 힘들게 계단을 걸어 올라가니 창업지원센터 같은 느낌의 실내가 보였다. 큰 홀과 작은 방 2군데서 동시에 컨퍼런스가 진행되고, 참가자는 둘 중에 원하는 내용을 골라서 듣는 형태였다.


## GStreamer State of the Union (Tim-Philipp Müller, Centricular)

지난 12개월 동안의 진행 상황을 대략적으로 훑어보고 앞으로 어떤 일이 있을 것인가 얘기하는 시간이었다.

### Gstreamer란 무엇인가?

* multimedia processing을 위한 프레임워크
* cross-platform이며, toolkit에 무관함
* libraries와 plugins의 집합
* 추상적인 API, 뛰어난 확장성
* low-level API (예: playbin)
* high-level API (예: video editing)

### Releases!

* 1.8 was released in March 2016
* 1.10 is scheduled to be released Really Soon Now

### New API - smaller bits

* GstController: Dynamic parameter control subsystem이다. 동적으로 플러그인의 파라미터를 변경할 수 있다.
  이번 업데이트로 인해 절대값을 지정 가능하게 되었다.

* Bus message를 통해 property change notifications을 얻을 수 있는 API 추가.

  이번 API는 어떤 element가 property를 변경할 때 property change notifications을 알려주는 기능을 한다.
  예를 들어서 시스템 컨트롤에서 볼륨을 바꾼다고 하면, volume이 변하고, system이 업데이트되고, 해당 volume이 바뀐 것을 보여주게 되지. 현재는 이 모든 것이 gobject signal을 이용해서 구현되어 있다. 어떤 스레드에서 emit하는 과정이 필요한데, 이건 별로 좋은 어플리케이션이 아니다. 왜냐하면 당신이 스레드에 대해서 걱정해야 하니까. 그래서 이번에 편리한 API를 만든 것이다. 이제는 property가 변경될 때마다 pipeline bus에서 notification을 얻을 수 있다.

* bin: add "deep-element-added" and "deep-element-removed" signals

  다이나믹 파이프라인에서 bin 안에 엘리먼트가 추가/제거 되는 것을 추적하기 용이하게 해 준다. 기존에는 bin이 너무 많으면 추적하기가 힘들었음.

* error messages: can add additional structured details, e.g. HTTP status codes / system error

  우리는 현재 에러 코드를 가지고 있다: explicit error code, debug message for developers, string for users
  그러나 이런 에러 코드가 자세한 내용을 포함하지는 않았다.
  이제, structured information을 error 메시지에 포함시킬 수가 있게 되었고, 이것을 어플리케이션에 pass할 수 있게 되었다.
  즉, http error, status code, system error 등 자세한 내용을 전달할 수 있게 되었다.

* tracer framework

  이번에 tracer framework을 merge했다. gstreamer 내부에 hooks을 넣었다. 원하는 패드를 지정할 수 있다. 나중에 데이터가 push 되거나 state가 변경될 때마다 콜백이 날아온다.
  gstreamer는 디버깅하기가 어렵고, 디버그 로그에는 structured information이 나온다. 이건 사람이 알아보기에는 편하지만, 파싱해서 타임스탬프를 가져오기에는 불편하다. leaks tracer는 이런 일을 쉽게 해준다. 또한 windows 등에서도 동작한다.

* audio conversion/resample library, all done in one step

  오디오 conversion/resample을 한 방에 해주는 라이브러리를 개발했다. 그러나 이런 작업을 한방에 수행하는 엘리먼트는 없다. 각각의 작업을 위한 엘리먼트가 분리되어 있다.

* GstPlayer now available in -bad, maybe into -base next cycle

  현재 플레이백 api로 playbin이 있는데, 이건 low-level용이다.
  high-level용이 필요해서 GstPlayer를 만들었다.

### New features - Stream API

우리가 멀티미디어 프레임워크이지만 사실 stream API는 없었음. 스트림의 기본적인 컨셉을 표현하는 그런 API는 없었음.

* GstStream: type, caps, tags, etc.
* GstStreamCollection: collection of streams

위 API들이 추가된 덕분에 dynamic 시나리오를 더 표현할 수 있게 되었다. 무언가를 broadcast 하는 중에 갑자기 새로운 오디오 트랙이 나타났지만 오디오 스트림은 그대로라든지, 오디오 트랙 중 하나가 사라졌는데 비디오는 그대로 있다든지 하는 시나리오가 가능해졌다. 이제 stream을 재사용할 수 있고, 단 하나의 stream만 변경해서 stream의 collection을 구성할 수도 있다.

### New features - playbin3

* parsebin

  decodebin이랑 기본적으로 비슷한데 그냥 디먹스하고 parse한다.

* decodebin3 / playbin3
  * dynamic streams
  * fast switching
  * only once decoder per stream
  * multiple external inputs (e.g. subs)

* works fine even if plugins (demuxers, parsers, etc.) don't support the new streams stuff yet

### New elements and plugins

* webrtcdsp: echo cancellation element

* FDK (Fraunhofer) AAC encoder and decoder

  새로운 AAC 인코더, 디코더 등장

* lv2 audio effects and generators (supersedes LADSPA)

### New module: gstreamer-vaapi (Video Acceleration API)

* VAAPI(Video Acceleration API)란, 그래픽 카드의 GPU를 사용하여 고성능으로 video를 decode/encode 하는 것이다.
* 이제 GStreamer upstream에서 maintain 된다. 예전보다 쉽고 빠르게 기능 추가가 가능해졌다.
* 성능 및 안정성 향상
* vp9 encoding 준비됨

### RTP/RTSP improvements

* much improved retransmission (rtx) support
* jitterbuffer fixes and performance improvements
* RTSP server fixes

* RFC 7273 clock and timing info distributed over SDP

  여러 디바이스가 동기화될 수 있게 하였다. 이런 동기화를 gstreamer 레벨에서 할 수도 있지만, RTP 레벨에서 할 수 있도록 하였다.

* rtspclientsink, a new RTSP RECORD sink element in gst-rtsp-server

### OpenGL improvements

* qmlglsink now works on wayland and windows and the RPi
* gl memory was rewritten
  * enabled eglmemory
  * iosurface memory
  * PBOs
  * generally more extensible
* egl supports gl3 - 더 많은, 더 좋은 API 사용
* gl 기반의 colorbalance, videoflip 엘리먼트 추가
* gldeinterlace now works with GL ES

### Other improvements

* vulkan support
* adaptive streaming improvements (clientside)
  * HLS alternative renditions - multiple 오디오 트랙, multiple 비디오 트랙
  * DASH trick modes
* vp8/vp9 encoder now uses multiple threads

### Future

* dmabuf support for waylandsink + gst-vaapi (zerocopy)
* EBU-TT-D TTML subtitle renderer + meta

### Future: move more things out of -bad

* 일단 bad라는 말이 붙어 있으면, 사람들은 걱정한다.
* 그리고 bad 중에서도 뭐가 좋은건지 뭐가 안 좋은건지 아무도 가르쳐주지 않는다.
* 그래서 준비가 되었다 싶으면 최대한 bad에서 빼려고 한다.
* move gl lib to base
* move aggregator to base
* rewrite muxers on top of aggregator
* move more plugins to base/good (e.g. tsdemux?)

### Future: Documentation

* old gstreamer.com SDK tutorials + docs have been made available under CC license by Fluendo

  옛날 튜토리얼은 지금 업스트림이랑 꽤 많이 차이가 난다. 여기가 공식 사이트인 줄 알고 사람들이 들어가보고 따라해보다가 최신 버전이랑 안 맞기 때문에 자꾸 문제에 부딪치게 된다. 비록 오래된 튜토리얼이긴 하지만 그래도 잘 쓰여졌고, 꽤 도움이 많이 되기 때문에 여전히 사람들이 많이 방문하고 참고한다.

* are being updated for 1.x and changes

* will land on gstreamer.freedesktop.org very very soon
  이제 1.x 버전에 맞추어 SDK 튜토리얼을 새롭게 작성하고 있고, 조만간 구버전을 대체할 것이다.
  수많은 doc 링크도 정리해서 하나의 docs module로 merge할 예정이다.

### Future: Examples

* new gst-examples repository
* we'll populate it slowly

### Future: Build System

* experimental support for `Meson` has been merged

  Meson이란?

  * 오픈 소스 build system
  * 아주 빠름
  * 사용자 친화적

* will enable better dev/deployment experience
  * like MSVC/Visual Studio support
* will take some time to mature, but strong momentum
  * "gst-all" will land soon (name tbd), try it!
* goal is to retire autotools
  * there will be a transition period
  * 현재 autotools에 의존한 스크립트도 많고, 많은 사람들이 빌드 시스템을 당장 바꾸기는 어려울 것이므로 시간이 걸릴 것임

### Room for improvement?

* adaptive streaming (DASH, HLS, etc.)
  * fairly good client-side story, but lousy creation story - 버그가 많음
* make it easier to write "simple servers"
  * souphttpserversink
  * rtspserversink
  * etc.
* windows, ios, android: more sink elements that work with the native UI toolkits like qmlglsink/gtksink etc.

### What else should we do better?

* Developer Tools
  * slow progress
* Daily builds

### Also: we still need better docs!

* more docs, different docs (tutorials, howtos)

  => new docs

* demo code/apps written as examples

  => gst-examples

* GStreamer book

  => 언제 나올 지 약속할 수 없다 :smile:

