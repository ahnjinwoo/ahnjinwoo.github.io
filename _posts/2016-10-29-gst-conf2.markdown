---
layout: post
title:  "Gstreamer Conference 2"
date:   2016-10-29 11:04:00 +0900
categories: Gstreamer
---

GStreamer Conference 2016을 다녀왔다.<br>
10-11 October 2016 · Berlin, Germany


# Tracking memory leaks (Guillaume Desmottes, Collabora)
새로운 leaks tracer tool을 이용해서 GStreamer code 에서 발생할 수 있는 memory leaks 을 디버깅하는 내용이다.

## 서론: Dead to all leaks

* Increase memory consumption

작은 임베디드 디바이스에서 어플리케이션이 실행되다가 메모리 leak이 발생하면 안 그래도 부족한 메모리를 낭비하게 된다. 

* OOM

프로세스가 너무 오랜 시간 동안 동작하면, 너무 많은 메모리를 사용하게 되어 OS에 의해 강제로 kill 되기도 한다.

* Crashes

프로세스가 강제로 kill 당하게 되면 결국 예기치 않은 크래시로 이어진다. 이러한 일련의 과정을 겪지 않기 위해서는 memory leaks 을 막아야 한다.

## 기존 툴 소개

### Valgrind: pros

* Most common tool

기존 툴 중에서는 메모리릭을 찾아내기 위해 보통 Valgrind 를 많이 사용한다. 수많은 리눅스 개발자들이 사용하고 있다.

* Detect all type of leaks

강력하다.

* Full stack trace

아주 유용하다.

* gst-validate support

써보니까 nice 하다.

### Valgrind: cons

* Low level

그냥 gstreamer 가 차지하는 비율을 대략적인 overview 정도로 보고 싶을 때에도 너무 자세하게 많은 내용이 나와서 tricky 하다.

* Very slow

너무 느리다. 새로운 패치가 올라오면 QA 쪽에서 자동으로 검증하고 문제가 생기면 패치를 reject 하려고 시스템을 구축했는데, 검증에 시간이 너무 많이 걸려서 하루 정도 소모하기도 하고 짜증이 난다.

* CPU

CPU 사용량도 너무 많다.

* Tricky to use on some systems

임베디드 개발을 할 때는 불편한 경우가 많다.

* False positives

다른 모듈에서 문제가 생긴 것을 엉뚱하게도 gstreamer 의 문제로 보고하는 경우가 있다.

### GST_TRACE

* Internal debugging tool (until 1.10)

예전 버전에서 사용하던 툴. 살아있는 모든 객체들을 보여준다.

* Track GstObject and GstMiniObject

유용하다. 왜냐하면 주로 디버깅할 때 신경쓰는 부분이기 때문에.

* False positives

문제가 아닌데도 leak 이라고 보고하는 경우가 많다. 어떤 객체들은 `의도적으로` leak 을 일으키는데, 실질적인 leak 은 아니다.

* Not great for QA tools

실질적인 leak 만을 골라내기 힘들어서 자동화된 QA 용으로는 부적합하다.

## 그래서 새롭게 개발한 것: gst-leaks

### "Leaked" flag

GST_OBJECT 와 GST_MINI_OBJECT 클래스에 대한 새로운 2개의 flag를 추가함.
이 객체가 프로세스의 마지막 순간에 어쩌면 leaked 될 수도 있다는 표시를 한다.

* GST_OBJECT_FLAG_MAY_BE_LEAKED
* GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED

위 플래그를 표시해둔 객체는 나중에 자동 검사할 때 무시한다.

### GstTracer

기존 툴을 replace 할 수 있는 툴이다.

* Tracing module loaded at run time

* Monitoring hooks

gstreamer pipeline 에서 일어나는 일을 알 수 있다.

* Formatted output

검사 결과를 전송하면 어플리케이션이 읽고 사용할 수 있다.

### Hooks

용어를 간단히 설명하자면, GstObject 클래스와 GstMiniObject 클래스가 있다. Gstreamer에서 모든 big object는 GstObject 이며, 모든 작은 object는 GstMiniObject 이다. GstMiniObject 는 생성/소멸을 자주 하는데, 대표적으로 GstCaps 가 있다.

* Gst(Mini)Object created
* Gst(Mini)Object destroyed

생성/소멸될 때를 hook 한다.

### gstleaks

* Implement as a GstTracer

* Track GstObject and GstMiniObject

어플리케이션이 종료되면 모든 살아있는 객체의 리스트를 나열한다. 어플리케이션이 끝날 때 소멸되었어야 했는데 살아 있으므로, 얘들이 바로 메모리 leak 이다.

* Raise a GLib warning if leaks are detected

QA 툴과 연동해서 사용할 때 유용하다.

### Gstleaks: pro

* Much lighter/faster than valgrind

* Integrated in core (1.10)

디폴트로 사용 가능하다. 외부 툴을 build 하는 부담이 없어서 좋다. (valgrind 를 쓸 때보다 확실히 편리함.)

* QA friendly

메모리릭을 발견하면 glib error를 발생시켜서 자동화 툴에 연동하기 편리하다.

* Only track leaks in gst code

Gst(Mini)Object 에 대해서만 detect 한다. 즉, 다른 라이브러리에서 사용하는 코드는 검사하지 않는다. 모든 stack trace를 굳이 다 보고 싶지 않을 때, 원하는 Gst(Mini)Object 에만 집중할 수 있다.

* No false positives

위에서와 같은 이유로, 엉뚱한 모듈의 메모리릭을 들고와서 gst의 문제라고 나오는 경우가 없다.

* Helped fixing loads of leaks

이 툴을 이용해서 실제로 많은 메모리릭을 해결했다고 한다.

### Signal support

* Borrowed from gobject-list

* GST_LEAKS_TRACER_SIG

우선 이 환경변수를 define 해줘야 한다. 불필요한 다른 유닉스 signal 을 catch 하지 않고 우리가 원하는 signal 만을 catch 하도록 한다.

* SIGUSR1: log alive objects

비디오 플레이어와 같은 어플리케이션이 실행될 때 kill을 이용해 이 signal 을 날리면 아직 살아있는 모든 객체의 목록을 얻을 수 있다. 어떤 객체가 어느 시점에 살아 있는지 확인할 수 있다.

* SIGUSR2: log objects created/destroyed since the previous checkpoint

우선 이 시그널을 이용하여 체크포인트를 만든다. 그리고 2번째로 이 시그널을 다시 날리면 모든 객체가 생성되고 소멸될 때까지의 델타 time 을 구한다.
2개의 액션 사이에 무슨 일이 일어나는지 볼 때 유용한 시그널이다.
웹브라우저로 예를 들자. 비디오 플레이를 시작하고, 체크포인트를 생성하고, 비디오를 중지하고, 웹페이지를 close 한다. 이런 액션 실행 사이에 무슨 일이 일어났는지 알 수 있다. 어느 객체가 생성되고 소멸되는지, 누가 살아있는지를 보여주기 때문이다.

## Debugging leaks

* gst_deinit()

사용법: main() 함수에서 return 하기 직전에 이 함수를 불러야 한다. 이 함수를 부르면 leak tracer를 destroy하고, 어느 객체가 아직 살아 있는지 탐지하게 된다.

* Find the "top" leak

메모리릭이 발생한 list 중에서 최대한 big object 부터 해결해 나가기를 추천한다.

* Only Gst(Mini)Object are tracked

특정 객체가 Gst(Mini)Object 의 subclass가 아니라면, 탐지되지 않는다.

* Filter when using GST_LEAKS_TRACER_STACK_TRACE

어떤 객체가 alloc 될 때마다 모든 스택 trace 를 메모리에 저장하면 메모리를 너무 많이 사용하게 되므로 원하는 곳에만 filter 를 걸도록 하자.

### gdb

* Track refcount changes

여기서는 gdb를 활용한 디버깅 테크닉을 소개하고 있다.
gdb에서는 특정 함수에 특정 argument 가 들어갈 때 어떤 작업을 수행하라고 할 수 있다. 이를 응용하여, 내가 원하는 어떤 객체가 ref/unref 될 때 catch 할 수 있다.

```
b gst_mini_object_ref if (mini_object == 0xdeadbeef)
b gst_mini_object_unref if (mini_object == 0xdeadbeef)
commands 1 2
bt
cont
end
```

예를 들어 특정 함수의 argument 로 들어가는 어떤 객체가 특정 주소를 갖게 되면 이 함수에서 breakpoint 를 거는 것이다.
위의 예제처럼 특정 함수를 ref/unref 두 개의 함수라고 한다면, 이 두 breakpoint에 오기 전에 stack trace 가 나오게 하고, continue 하도록 한다. 이렇게 해서 생성된 trace를 분석하면, 어디에서 객체가 ref 되고 어디에서 객체가 unref 되는지 알 수 있다. 즉, unref 되지 않은 객체로 인한 메모리릭을 찾는데 도움이 된다.
이건 꽤 유용하지만, 문제는 너무 trace가 길어진다는 것이다. 수많은 객체가 ref/unref 되는 것을 항상 보여주기 때문이다.

* Ignore GObject signal and property code paths

glib 이 내부적으로 ref/unref 하는 것은 무시하도록 하자. 불필요한 log 를 줄일 수 있다.

### Refcount transfers

* (transfer full) API

glib에서, 특히 gstreamer에서는, 수많은 `transfer full API`를 볼 수 있다. 이게 무슨 말이냐면, `호출된 함수가 unref 를 책임지고 있다` 또는 `호출된 함수가 특정 객체의 오너십을 가져간다` 라는 말이다. 즉, 만일 이 함수가 제대로 unref를 해주지 않으면 릭이 생긴다는 뜻이다. 아마도 이런 함수들이 메모리릭의 원인이 되기 쉬운 곳일 것이다. 그래서 보통 이런 함수부터 디버깅을 시작하기를 추천한다.

이렇게 오너십을 주고 받는 부분은 디버깅하기 까다롭다. 그래서 요즘 세바스찬이 `Rust` 언어를 사용하자고 주장하고 있는 것일까? 새로운 언어를 배우는 것은 부담이지만, 적어도 Rust를 사용하면 오너십을 넘기면서 발생하는 버그를 줄이는 데에는 도움이 될 것이다.

### Future improvements

* Better stack trace (file + line)
Valgrind 처럼 보기 좋게 만들자.

* GUI tracking alive objects?
GUI 로 보기 좋게 만들자. 살아 있는 객체를 알아보기 쉽게.

### 질문: document가 어디에 있나요?
gstreamer repository에서 gst core 내부에 모든 tracer에 대한 text 파일이 있고 예제도 있다.

### 질문: 성능은 어떤가요?
아직 공식적으로 측정 안해봤다. 임베디드 디바이스에서 테스트 안해봤는데, 작은 시스템에서는 오버헤드가 있을 것으로 예상한다.

